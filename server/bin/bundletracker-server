#!/usr/bin/env node
const { exec } = require('child_process')
const path = require('path')

require('yargs')
    .scriptName('bundletracker-server')
    .usage('$0 <cmd> [args]')
    .command(['start', '$0'], 'run "migrate" and "server"', async () => {
        await migrate()
        await server()
    })
    .command('migrate', 'run pending database migrations', migrate)
    .command('server', 'start the server', server)
    .command(
        'new project [name]',
        'create a new project and get its token',
        (yargs) => {
            yargs.positional('name', {
                type: 'string',
                describe: 'name of the project',
            })
        },
        newProject
    )
    .help().argv

async function migrate() {
    const prismaPath = path.resolve(__dirname, '../node_modules/.bin/prisma')
    const schemaPath = path.resolve(__dirname, '../prisma/schema.prisma')
    const runCommand = (command) =>
        new Promise((resolve, reject) => {
            exec(command, (error, stdout, stderr) => {
                if (error) {
                    console.error(stderr)
                    reject(stderr)
                    process.exit(1)
                } else {
                    console.log(stdout)
                    resolve(stdout)
                }
            })
        })

    console.log('📙 Running Migrations')
    await runCommand(`${prismaPath} migrate deploy --schema ${schemaPath} --preview-feature`)
}

async function server() {
    require(__dirname + '/../dist/server.js')
}

async function newProject({ name }) {
    if (!name) {
        console.error('Please enter a name for the new project!')
        process.exit(1)
    }

    const { PrismaClient } = require('../prisma/client')
    const prisma = new PrismaClient()

    const { randomString } = require('../dist/utils')
    const token = randomString(40)
    await prisma.project.create({ data: { name, token } })

    console.log(`🏁 Project "${name}" created!`)
    console.log(`🔑 Use this token to upload bundles: ${token}`)
    process.exit(1)
}
